import System;
import Vendor.Onux.ConsoleStyle;

external process;

/**
 * js++Unit is an xUnit testing framework for writing and running automated 
 * tests.
 */
module Vendor.JSPPUnit
{
	/**
	 * Defines a test suite.
	 *
	 * @param title The title of the test suite.
	 * @param code The code for the test suite.
	 */
	public void suite(string title, void() code) {
		if (State.running) {
			Utils.printSuiteTitle(title);
			Runner.runSuite(code);
		}
		else {
			State.suitesQueue[title] = code;
		}
	}

	/**
	 * Defines a test.
	 *
	 * @param title The title of the test.
	 * @param code The code for the test.
	 */
	public void test(string title, void() code) {
		Runner.runTest(title, code, false);
	}

	/**
	 * Defines a skipped test.
	 *
	 * @param title The title of the test.
	 * @param code The code for the test.
	 */
	public void skip(string title, void() code) {
		string SKIP = "\u25CB";
		Output.write(
			Utils.getPadding() +
			ConsoleStyle.Colors.cyan(Utils.PADDING + SKIP + " " + title)
		);
		++State.counter_skippedTests;
	}

	/**
	 * Defines a test that expects an exception to be thrown.
	 *
	 * @param title The title of the test.
	 * @param code The code for the test.
	 */
	public void throws(string title, void() code) {
		Runner.runTest(title, code, true);
	}
	/**
	 * Defines a test that expects a specific exception to be thrown.
	 *
	 * @param title The title of the test.
	 * @param code The code for the test.
	 * @param exception The type of exception to expect.
	 */
	public void throws(string title, void() code, external exception) {
		Runner.runTest(title, code, true, exception);
	}

	/**
	 * Runs the defined tests.
	 */
	public void run() {
		State.running = true;
		Output.write("");

		// TODO: replace with 'System.Benchmark'
		Date d = new Date();
		double t = d.getTime();

		for(string suiteTitle in State.suitesQueue) {
			Utils.printSuiteTitle(suiteTitle);

			void() suiteCode = State.suitesQueue[suiteTitle] ?? void(){};
			Runner.runSuite(suiteCode);
		}

		string output = "";
		Output.write(String.EMPTY);
		if (State.counter_passedTests > 0)  {
			double time = (new Date).getTime() - t;

			output += Utils.PADDING;
			output += ConsoleStyle.Colors.green(
				State.counter_passedTests.toString() + " passing"
			);
			output += ConsoleStyle.Colors.gray(" (" + time.toString() + "ms)");
		}
		if (State.counter_skippedTests > 0) {
			output += Utils.PADDING;
			output += ConsoleStyle.Colors.cyan(
				State.counter_skippedTests.toString() + " skipped"
			);
		}
		if (State.counter_failedTests > 0) {
			output += Utils.PADDING;
			output += ConsoleStyle.Colors.red(
				State.counter_failedTests.toString() + " failed"
			);
		}
		Output.write(output);
		Output.write(String.EMPTY);

		if (State.counter_failedTests > 0 && typeof process == "object") {
			process.exit(1);
		}
	}
}